<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Upload Resource</title>
  <script src="https://cdn.tailwindcss.com/3.4.16"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: { primary: "#4F46E5", secondary: "#6366F1" },
          borderRadius: {
            button: "8px",
          },
        },
      },
    };
  </script>
  <link
    href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
    rel="stylesheet"
  />
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css"
  />
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #F8FAFC;
    }
    .file-upload {
      border: 2px dashed #CBD5E1;
      transition: all 0.3s ease;
    }
    .file-upload:hover {
      border-color: #4F46E5;
      background-color: #F5F3FF;
    }
    .file-upload.dragging {
      border-color: #4F46E5;
      background-color: #F5F3FF;
    }
  </style>
</head>
<body class="min-h-screen">
  <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="bg-white p-6 sm:p-8 rounded-xl shadow-sm border border-gray-100">
      <div class="flex items-center gap-3 mb-6">
        <a href="/view-docs" class="text-gray-500 hover:text-primary transition-all">
          <i class="ri-arrow-left-line text-xl"></i>
        </a>
        <h1 class="text-2xl font-bold text-gray-900">Upload New Resource</h1>
      </div>

      <form id="uploadForm" action="/upload" method="POST" enctype="multipart/form-data" class="space-y-6">
        <!-- File Upload -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">PDF File</label>
          <div 
            id="fileDropzone" 
            class="file-upload rounded-lg p-8 text-center cursor-pointer"
          >
            <input type="file" id="fileInput" name="pdf" accept=".pdf" class="hidden" required />
            <div id="uploadContent">
              <i class="ri-upload-cloud-2-line text-4xl text-primary mb-3"></i>
              <p class="font-medium text-gray-700">Drag & drop your PDF here</p>
              <p class="text-sm text-gray-500 mt-1">or click to browse files</p>
              <p class="text-xs text-gray-400 mt-3">Max file size: 50MB</p>
            </div>
            <div id="fileInfo" class="hidden items-center justify-center gap-3 p-3 bg-primary bg-opacity-5 rounded-lg">
              <i class="ri-file-text-line text-primary text-xl"></i>
              <div class="text-left">
                <p id="fileName" class="font-medium text-gray-700 text-sm truncate max-w-xs"></p>
                <p id="fileSize" class="text-xs text-gray-500"></p>
              </div>
              <button type="button" id="removeFile" class="ml-auto text-gray-400 hover:text-red-500">
                <i class="ri-close-line"></i>
              </button>
            </div>
          </div>
          <p class="mt-1 text-xs text-gray-500" id="fileError"></p>
        </div>

        <!-- Resource Details -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="year" class="block text-sm font-medium text-gray-700 mb-2">Year*</label>
            <select
              id="year"
              name="year"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary transition-all"
            >
              <option value="" disabled selected>Select Year</option>
              <% years.forEach(function(year) { %>
                <option value="<%= year.name %>"><%= year.name %></option>
              <% }); %>
            </select>
          </div>

          <div>
            <label for="department" class="block text-sm font-medium text-gray-700 mb-2">Department*</label>
            <select
              id="department"
              name="department"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary transition-all"
            >
              <option value="" disabled selected>Select Department</option>
            </select>
          </div>

          <div>
            <label for="branch" class="block text-sm font-medium text-gray-700 mb-2">Branch*</label>
            <select
              id="branch"
              name="branch"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary transition-all"
            >
              <option value="" disabled selected>Select Branch</option>
            </select>
          </div>

          <div>
            <label for="subject" class="block text-sm font-medium text-gray-700 mb-2">Subject*</label>
            <select
              id="subject"
              name="subject"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary transition-all"
            >
              <option value="" disabled selected>Select Subject</option>
            </select>
          </div>

          <div>
            <label for="type" class="block text-sm font-medium text-gray-700 mb-2">Type*</label>
            <select
              id="type"
              name="type"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary transition-all"
            >
              <option value="" disabled selected>Select Type</option>
              <option value="Books">Books</option>
              <option value="Notes">Notes</option>
              <option value="Papers">Papers</option>
            </select>
          </div>

          <div>
            <label for="type" class="block text-sm font-medium text-gray-700 mb-2">Title</label>
            <input
              id="type"
              name="title"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary transition-all"
            >
          </div>

          <div>
            <label for="type" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <input
              id="type"
              name="description"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary transition-all"
            >
          </div>


        </div>

        <!-- Submit Button -->
        <div class="pt-4">
          <button
            type="submit"
            id="submitBtn"
            class="w-full bg-gradient-to-r from-primary to-secondary text-white px-6 py-3 rounded-button flex items-center justify-center gap-2 hover:shadow-lg transition-all"
          >
            <i class="ri-upload-line"></i>
            <span>Upload Resource</span>
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // Fetch departments, branches, and subjects dynamically
    document.getElementById("year").addEventListener("change", async function() {
      const yearId = this.value;
      const departmentSelect = document.getElementById("department");
      const branchSelect = document.getElementById("branch");
      const subjectSelect = document.getElementById("subject");

      // Fetch departments based on selected year
      const responseDept = await fetch(`/departments/${yearId}`);
      const departments = await responseDept.json();
      departmentSelect.innerHTML = `<option value="" disabled selected>Select Department</option>`;
      departments.forEach(department => {
        departmentSelect.innerHTML += `<option value="${department.name}">${department.name}</option>`;
      });

      // Reset subsequent selections
      branchSelect.innerHTML = `<option value="" disabled selected>Select Branch</option>`;
      subjectSelect.innerHTML = `<option value="" disabled selected>Select Subject</option>`;
    });

    document.getElementById("department").addEventListener("change", async function() {
      const yearId = document.getElementById("year").value;
      const deptId = this.value;
      const branchSelect = document.getElementById("branch");
      const subjectSelect = document.getElementById("subject");

      // Fetch branches based on selected department and year
      const responseBranch = await fetch(`/branches/${yearId}/${deptId}`);
      const branches = await responseBranch.json();
      branchSelect.innerHTML = `<option value="" disabled selected>Select Branch</option>`;
      branches.forEach(branch => {
        branchSelect.innerHTML += `<option value="${branch.name}">${branch.name}</option>`;
      });

      // Reset subsequent selections
      subjectSelect.innerHTML = `<option value="" disabled selected>Select Subject</option>`;
    });

    document.getElementById("branch").addEventListener("change", async function() {
      const yearId = document.getElementById("year").value;
      const deptId = document.getElementById("department").value;
      const branchId = this.value;
      const subjectSelect = document.getElementById("subject");

      // Fetch subjects based on selected branch, department, and year
      const responseSubject = await fetch(`/subjects/${yearId}/${deptId}/${branchId}`);
      const subjects = await responseSubject.json();
      subjectSelect.innerHTML = `<option value="" disabled selected>Select Subject</option>`;
      subjects.forEach(subject => {
        subjectSelect.innerHTML += `<option value="${subject.name}">${subject.name}</option>`;
      });
    });

     // File upload handling
    const fileDropzone = document.getElementById('fileDropzone');
    const fileInput = document.getElementById('fileInput');
    const uploadContent = document.getElementById('uploadContent');
    const fileInfo = document.getElementById('fileInfo');
    const fileName = document.getElementById('fileName');
    const fileSize = document.getElementById('fileSize');
    const removeFile = document.getElementById('removeFile');
    const fileError = document.getElementById('fileError');
    const uploadForm = document.getElementById('uploadForm');
    const submitBtn = document.getElementById('submitBtn');

    // Handle drag and drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      fileDropzone.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      fileDropzone.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      fileDropzone.addEventListener(eventName, unhighlight, false);
    });

    function highlight() {
      fileDropzone.classList.add('dragging');
    }

    function unhighlight() {
      fileDropzone.classList.remove('dragging');
    }

    // Handle dropped files
    fileDropzone.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      if (files.length) {
        handleFiles(files);
      }
    }

    // Handle clicked files
    fileDropzone.addEventListener('click', () => fileInput.click());
    fileInput.addEventListener('change', () => handleFiles(fileInput.files));

    // Handle selected files
    function handleFiles(files) {
      const file = files[0];
      
      // Validate file
      if (!file.type.includes('pdf')) {
        fileError.textContent = 'Please upload a PDF file';
        return;
      }
      
      if (file.size > 50 * 1024 * 1024) { // 50MB
        fileError.textContent = 'File size exceeds 50MB limit';
        return;
      }
      
      fileError.textContent = '';
      
      // Display file info
      fileName.textContent = file.name;
      fileSize.textContent = formatFileSize(file.size);
      uploadContent.classList.add('hidden');
      fileInfo.classList.remove('hidden');
    }

    // Remove file
    removeFile.addEventListener('click', (e) => {
      e.stopPropagation();
      fileInput.value = '';
      uploadContent.classList.remove('hidden');
      fileInfo.classList.add('hidden');
      fileError.textContent = '';
    });

    // Format file size
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Form submission handling
    uploadForm.addEventListener('submit', function(e) {
      if (!fileInput.files.length) {
        e.preventDefault();
        fileError.textContent = 'Please select a PDF file';
        return;
      }
      
      // Disable button during upload
      submitBtn.disabled = true;
      submitBtn.innerHTML = 
        `<i class="ri-loader-4-line loading-spinner"></i>
        <span>Uploading...</span>`
      ;
    });
  </script>
</body>
</html>
